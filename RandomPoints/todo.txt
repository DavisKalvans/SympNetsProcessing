Done:
    Fix naming scheme for nonsch and sch

    Fix trained model names (eta1 isnt 2, but 3; also there shouldn't be TV0 in the front)

    Fix acc and loss plotting - for bigger tau values, the y axis range should be higher, 
    maybe to 10^3 instead of 10^(-1)

    In symp_module_class.py change the bias to initialize as zero vectors

    Create a script file that generates an analytical trajectory to use later for prediction errors

    Create a script file for predictions

    Seperate the HarmOsc and HarmOsc_H function in a sperate file, so it doesn't
    exectue the whole script...

    Create a script file for error calculations and plotting

    Investigate the issu of solve_ivp giving inaccurate values for high time step tau.
    Possibly with odeint or generating data using Julia instead of Python
    Julia doesn't do better - max tau seems to be 0.3

    Test sch to find good eta1 and eta2 values.
    It seems good eta1 = 1e-02, eta2 = 1e-05, epochs = 50_000.

    alternative_predictions goes backward with the model with the first point,
    does all the steps with numerical method, and then goes forward with the model
    for all gotten points as it should be.

    Try and figure out why nnet(nnet-1(x)) == x when initializing model,
    but not after its been trained. It ruins everything!
    Turns out there was a mistake in backwards function - all fixed now.

    Delete old incorrectly trained models

    Redo all of the training

    For comparison, plot errors and results of plain numerical method against the new method

    Redo all the error plots with new comparisons

    Use a linear neural network for harmonic oscilator (because it's a linear problem)

    Save the model that achieves best accuracy in training

    Change parts of code that deal with predictions and errors, so that there's an option
    to load in the "best models"

    Check if a good model does well with tau values different than the ones it was trained with

    Linear models with more data

    Predictions and errors for Tanh model

    Calculate and check results for the models trained so far

    Look at longer prognosis

    All previous problems are fixed and the model does do learning and can get great results

    Convergence graph script for linear and non linear models

    Convergence graphs with multiple same size models but with differing training data,
    to see if the model gets imporvements from more data

    Linear and non-linear models with more training data to see if that can gives
    better results

    Prediction error plotting for same size models with various training data, to see if
    more data gets a better model.
    Seems it does get better, but at least in the case of HarmOsc, it's not by much

    Seperate folder for created training data itself

    Seperate folder structure for different problems, their models and predictions.
    Reflect those changes into all scripts as well as rename all current ones with appended HarmOsc,
    since they work for that specifically.

    Get Math pendulum problem in here

    Verlet method

    Figure out proper Euler method for Kepler problem

Need to do:

    For error plot saving, implement using os.getcwd() and os.path.exists() to check
    wheather the folder for predictions until T[Tend] exist, and create one if not

    Verlet but pass along to the model tau^2 instead of tau to get a symetric operator
    and see if that helps with training and lower errors

    Multiple trajectories for everything (probably a seperate general function)

Potential problems/updates

    Create a database for everyhtin to easily check everything at a glance

    

Good parameters for training

    HarmOsc:
        sch = True, eta1 = 1e-3, eta2 = 1e-5
        sch = False, learning_rate = 1e-4

    Pendulum:
        